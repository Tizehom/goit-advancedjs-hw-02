{"version":3,"file":"commonHelpers2.js","sources":["../src/js/02-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst datetimePicker = document.getElementById('datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst daysSpan = document.querySelector('[data-days]');\nconst hoursSpan = document.querySelector('[data-hours]');\nconst minutesSpan = document.querySelector('[data-minutes]');\nconst secondsSpan = document.querySelector('[data-seconds]');\n\nstartButton.disabled = true;\n\nlet selectedDate = null;\nlet timerId = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0] <= new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n      });\n\n      return;\n    }\n    selectedDate = selectedDates[0];\n    startButton.disabled = false;\n  },\n};\n\nflatpickr(datetimePicker, options);\n\nstartButton.addEventListener('click', startTimer);\n\nfunction startTimer() {\n  datetimePicker.disabled = true;\n  startButton.disabled = true;\n  timerId = setInterval(() => {\n    const currentTime = new Date();\n    const deltaTime = selectedDate - currentTime;\n    if (deltaTime <= 0) {\n      clearInterval(timerId);\n      datetimePicker.disabled = false;\n      return;\n    }\n    updateTimer(convertMs(deltaTime));\n  }, 1000);\n}\n\nfunction updateTimer({ days, hours, minutes, seconds }) {\n  daysSpan.textContent = addLeadingZero(days);\n  hoursSpan.textContent = addLeadingZero(hours);\n  minutesSpan.textContent = addLeadingZero(minutes);\n  secondsSpan.textContent = addLeadingZero(seconds);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n"],"names":["datetimePicker","startButton","daysSpan","hoursSpan","minutesSpan","secondsSpan","selectedDate","timerId","options","selectedDates","iziToast","flatpickr","startTimer","currentTime","deltaTime","updateTimer","convertMs","days","hours","minutes","seconds","addLeadingZero","ms","value"],"mappings":"0IAKA,MAAMA,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAE3DJ,EAAY,SAAW,GAEvB,IAAIK,EAAe,KACfC,EAAU,KAEd,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,GAAIA,EAAc,IAAM,IAAI,KAAQ,CAClCC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,UAClB,CAAO,EAED,MACD,CACDJ,EAAeG,EAAc,GAC7BR,EAAY,SAAW,EACxB,CACH,EAEAU,EAAUX,EAAgBQ,CAAO,EAEjCP,EAAY,iBAAiB,QAASW,CAAU,EAEhD,SAASA,GAAa,CACpBZ,EAAe,SAAW,GAC1BC,EAAY,SAAW,GACvBM,EAAU,YAAY,IAAM,CAC1B,MAAMM,EAAc,IAAI,KAClBC,EAAYR,EAAeO,EACjC,GAAIC,GAAa,EAAG,CAClB,cAAcP,CAAO,EACrBP,EAAe,SAAW,GAC1B,MACD,CACDe,EAAYC,EAAUF,CAAS,CAAC,CACjC,EAAE,GAAI,CACT,CAEA,SAASC,EAAY,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACtDlB,EAAS,YAAcmB,EAAeJ,CAAI,EAC1Cd,EAAU,YAAckB,EAAeH,CAAK,EAC5Cd,EAAY,YAAciB,EAAeF,CAAO,EAChDd,EAAY,YAAcgB,EAAeD,CAAO,CAClD,CAEA,SAASJ,EAAUM,EAAI,CAMrB,MAAML,EAAO,KAAK,MAAMK,EAAK,KAAG,EAC1BJ,EAAQ,KAAK,MAAOI,EAAK,MAAO,IAAI,EACpCH,EAAU,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,EACjDF,EAAU,KAAK,MAASE,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASC,EAAeE,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}